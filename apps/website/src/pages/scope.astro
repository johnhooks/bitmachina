<script>
	import { calcPoints } from "@bitmachina/scope";

	let oscillator,
		isPlaying,
		pixelRatio,
		sizeOnScreen,
		segmentWidth,
		offset = 0,
		isOffset = false,
		noDataPoints = 10;
	const canvas = document.getElementById("canvas"),
		c = canvas.getContext("2d"),
		ac = new AudioContext(),
		powerBtn = document.getElementById("on-off"),
		oscType = document.getElementById("osc-type"),
		freqSlider = document.getElementById("frequency"),
		gainSlider = document.getElementById("gain"),
		zoomSlider = document.getElementById("zoom"),
		gainNode = new GainNode(ac, {
			gain: 0.5,
		}),
		analyser = new AnalyserNode(ac, {
			smoothingTimeConstant: 1,
			fftSize: 32768,
		}),
		dataArray = new Float32Array(analyser.frequencyBinCount);

	console.log(analyser.frequencyBinCount);
	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;
	pixelRatio = window.devicePixelRatio;
	sizeOnScreen = canvas.getBoundingClientRect();
	canvas.width = sizeOnScreen.width * pixelRatio;
	canvas.height = sizeOnScreen.height * pixelRatio;
	canvas.style.width = canvas.width / pixelRatio + "px";
	canvas.style.height = canvas.height / pixelRatio + "px";
	c.fillStyle = "#181818";
	c.fillRect(0, 0, canvas.width, canvas.height);
	c.strokeStyle = "#33ee55";
	c.lineWidth = 4;
	c.beginPath();
	c.moveTo(0, canvas.height / 2);
	c.lineTo(canvas.width, canvas.height / 2);
	c.stroke();
	c.font = "48px Courier New";

	powerBtn.addEventListener("click", () => {
		if (isPlaying) {
			if (oscillator) oscillator.stop();
			powerBtn.innerHTML = "Turn On";
		} else {
			oscillator = new OscillatorNode(ac, {
				type: oscType.value,
				frequency: freqSlider.value,
			});
			oscillator.connect(gainNode);
			gainNode.connect(analyser);
			analyser.connect(ac.destination);
			oscillator.start();
			draw();
			powerBtn.innerHTML = "Turn Off";
		}
		document.getElementById("led").classList.toggle("on");
		isPlaying = !isPlaying;
	});

	freqSlider.addEventListener("input", (event) => {
		let freq = event.target.value;
		document.getElementById("frequencyValue").innerHTML = freq;
		if (oscillator && isPlaying) {
			oscillator.frequency.value = freq;
		}
	});

	oscType.addEventListener("change", (event) => {
		if (oscillator && isPlaying) {
			oscillator.type = event.target.value;
		}
	});

	gainSlider.addEventListener("input", (event) => {
		let gain = event.target.value;
		document.getElementById("gainValue").innerHTML = gain;
		if (oscillator && isPlaying) {
			gainNode.gain.value = gain;
		}
	});

	zoomSlider.addEventListener("input", (event) => {
		let zoom = event.target.value;
		document.getElementById("zoomValue").innerHTML = zoom;
	});

	const draw = () => {
		c.fillRect(0, 0, canvas.width, canvas.height);
		c.beginPath();

		if (isPlaying) {
			analyser.getFloatTimeDomainData(dataArray);

			const [first, ...rest] = calcPoints({
				data: dataArray,
				width: canvas.width,
				height: canvas.height,
			});

			c.moveTo(...first);

			for (const [x, y] of rest) {
				c.lineTo(x, y);
			}

			c.stroke();
		} else {
			c.moveTo(0, canvas.height / 2);
			c.lineTo(canvas.width, canvas.height / 2);
		}

		c.stroke();
		// const zoom = zoomSlider.value;

		// analyser.getFloatTimeDomainData(dataArray);

		// const points = calcPoints({ data: dataArray, width: canvas.width, height: canvas.height });
		// const waveIndexes = analyze(dataArray);

		// if (count++ % 100 === 0) {
		// 	let lengthSum = 0;

		// 	for (let i = 0; i < waveIndexes.length; i++) {
		// 		if (i === 0) continue;
		// 		lengthSum = lengthSum + (waveIndexes[i] - waveIndexes[i - 1]);
		// 	}

		// 	console.log(`waves: ${waveIndexes.length}`);
		// 	console.log(`Avg length: ${lengthSum / waveIndexes.length}`);
		// }

		// // segmentWidth = canvas.width / viewSlider.value;
		// segmentWidth = canvas.width / 256;
		// c.fillRect(0, 0, canvas.width, canvas.height);
		// c.beginPath();

		// if (isPlaying) {
		// 	const indexOffset = waveIndexes[1];

		// 	const data1 = dataArray[indexOffset - 1];
		// 	const data2 = dataArray[indexOffset];

		// 	// If data1 isn't negative this will be really wrong.
		// 	const ratio = data2 / (Math.abs(data1) + data2);

		// 	const x1 = 0;
		// 	const y1 = data1 * canvas.height + canvas.height / 2;
		// 	const x2 = segmentWidth;
		// 	const y2 = data2 * canvas.height + canvas.height / 2;
		// 	const m = (y2 - y1) / (x2 - x1);

		// 	const y3 = (y2 - y1) * ratio + y1;

		// 	const xOffset = Math.abs((y2 - y3) / m - x2);

		// 	// Move to one point before the start of the line, off canvas
		// 	c.moveTo(xOffset - segmentWidth, y1);

		// 	// c.fillStyle = "rgb(255, 165, 0)";
		// 	// c.fillText(round(xOffset), 500, 50);
		// 	// c.fillStyle = "#181818";

		// 	for (let i = 0; i < 256; i++) {
		// 		let x = i * segmentWidth + xOffset;
		// 		let v = dataArray[i + indexOffset];

		// 		let y = v * canvas.height + canvas.height / 2;

		// 		c.lineTo(x, y);
		// 	}

		// 	const x4 = 256 * segmentWidth + xOffset;
		// 	const y4 = dataArray[indexOffset + 256] * canvas.height + canvas.height / 2;
		// 	c.lineTo(x4, y4);
		// 	c.stroke();
		// }

		requestAnimationFrame(draw);
	};

	function round(number) {
		return Math.floor(number * 1000) / 1000;
	}
</script>

<style>
	* {
		box-sizing: border-box;
	}
	html,
	body {
		margin: 0;
		width: 100%;
		font-family: Arial;
	}
	#canvas {
		position: absolute;
		top: 0;
		left: 0;
		background-color: #181818;
	}
	#controls {
		position: absolute;
		display: flex;
		flex-direction: column;
		top: 0;
		left: 0;
		z-index: 1;
		background-color: #6666;
		color: #fff;
		padding: 15px 15px 0 15px;
		border-radius: 10px;
		margin: 15px;
		font-size: 11px;
	}
	#controls button,
	#controls select {
		font-size: 11px;
		padding: 2px 0;
	}
	#controls select,
	#controls input,
	#controls #led {
		margin-bottom: 15px;
	}
	#controls button {
		border: 0;
	}
	#controls label {
		margin-bottom: 5px;
	}
	#led {
		height: 3px;
		background-color: #ee2233;
	}
	#led.on {
		background-color: #49cb61;
	}
</style>

<div id="controls">
	<button id="on-off">Turn On</button>
	<div id="led"></div>

	<label for="osc-type">Oscillator Type</label>
	<select id="osc-type">
		<option value="sine">Sine</option>
		<option value="square">Square</option>
		<option value="sawtooth">Sawtooth</option>
		<option value="triangle">Triangle</option>
	</select>

	<label for="frequency">Frequency: <span id="frequencyValue">440</span></label>
	<input id="frequency" type="range" min="110" max="1760" step="1" value="440" />

	<label for="gain">Input Gain: <span id="gainValue">0.5</span></label>
	<input id="gain" type="range" min="0" max="1" step="0.05" value="0.5" />

	<label for="zoom">Zoom: <span id="zoomValue">1</span></label>
	<input id="zoom" type="range" min="1" max="256" step="1" value="1" />
</div>

<canvas id="canvas"></canvas>
